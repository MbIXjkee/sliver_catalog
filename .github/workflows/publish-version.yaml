name: Publish a new version of the library
on:
  push:
    tags:
      - 'release_[0-9]+.[0-9]+.[0-9]+'

jobs:
  publish:
    name: Publish package
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    defaults:
      run:
        shell: bash
    outputs:
      version: ${{ steps.extract_version.outputs.version }}

    steps:
        - name: Checkout
          uses: actions/checkout@v4
          
        - name: Extract version from tag
          id: extract_version
          run: |
            TAG_NAME="${GITHUB_REF#refs/tags/}"
            VERSION="${TAG_NAME#release_}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Version extracted from tag: $VERSION"
            
        - name: Verify version in pubspec.yaml
          run: |
            VERSION="${{ steps.extract_version.outputs.version }}"
            PUBSPEC_VERSION=$(grep '^version:' pubspec.yaml | cut -d ':' -f2 | xargs)

            echo "üîç pubspec.yaml version: $PUBSPEC_VERSION"

            if [ "$VERSION" != "$PUBSPEC_VERSION" ]; then
              echo "‚ùå pubspec.yaml version does not match tag version: $VERSION"
              exit 1
            fi

            echo "‚úÖ pubspec.yaml version matches tag version: $VERSION"

        - name: Verify version exists in CHANGELOG.md
          run: |
            VERSION="${{ steps.extract_version.outputs.version }}"

            if ! grep -q "^## $VERSION" CHANGELOG.md; then
              echo "‚ùå CHANGELOG.md does not contain entry for version $VERSION"
              exit 1
            fi

            echo "‚úÖ CHANGELOG.md contains entry for version $VERSION"
            
        - name: Verify version is not already published on pub.dev
          run: |
            VERSION="${{ steps.extract_version.outputs.version }}"
            PACKAGE_NAME=$(grep '^name:' pubspec.yaml | cut -d ':' -f2 | xargs)
            
            echo "Checking if version $VERSION of $PACKAGE_NAME already exists on pub.dev..."

            PUBLISHED=$(curl -s "https://pub.dev/api/packages/$PACKAGE_NAME" | jq -r '.versions[].version')
            
            if echo "$PUBLISHED" | grep -Fxq "$VERSION"; then
              echo "‚ùå Version $VERSION is already published on pub.dev"
              exit 1
            fi

            echo "‚úÖ Version $VERSION is not yet published"

        - name: Setup Dart (configure Config)
          uses: dart-lang/setup-dart@v1

        - name: Prepare Flutter
          uses: ./.github/actions/flutter-setup

        - name: Install dependencies
          run: flutter pub get

        - name: Dry run publish
          run: dart pub publish --dry-run

        - name: Publish to pub.dev
          run: dart pub publish -f

  deploy-example:
    name: Deploy example to GitHub Pages
    needs: publish
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare Flutter
        uses: ./.github/actions/flutter-setup

      - name: Install dependencies
        run: flutter pub get

      - name: Deploy an example
        uses: ./.github/actions/deploy-example
        with:
          destination_dir: release_${{ needs.publish.outputs.version }}
          gh_token: ${{ secrets.GITHUB_TOKEN }}
